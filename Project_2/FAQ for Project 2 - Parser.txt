FAQ for Project 2: Parser.

2017.10.24

For the second project (parser), you need to prepare a yacc input, say minipas.y, using the mini-Pascal grammar given in the file MINI-PASCAL-GRAMMAR.txt.

Then you use the yacc tool to process minipas.y. Several C files will be generated. The most important file is y.tab.c, which contains the C source code of the parser. 

Then you use a C compiler to compile y.tab.c and other files generated by yacc and lex. You will obtain an executable file. The executable file is the parser. You use that parser to compile other mini-Pascal programs. There is a collection of min-Pascal test prorams located in the TEST-COMPILER02-FOR-PARSER directory.

Another difficulty you will have is to combine your parser (y.tab.c, generated by yacc) and the scanner (lex.yy.c, generated by lex in Project 1). You can read the document "Communication between Lex and Yacc.pdf" or "Lex and YACC primer_HOWTO.pdf" for combining the parser and the scanner. Specifically, the numbers representing the terminals must be the same in lex.yy.c and in y.tab.c because the scanner returns the numbers of the terminals (also called tokens in the scanner) to the parser. The parser uses the numbers of terminals for parsing.

There are several examples for lex/yacc combination in the lex-yacc-examples directory.

----

You can use flex instead of lex. Flex and lex are essentially the same as far as our project is concerned.

You can also use the bison tool. Bison is a new implementation of yacc. They are compatiable and produce the same parsers. You can use either yacc or bison.

----