Shift PROGRAM
Shift IDENTIFIER
Shift LPAREN
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift RPAREN
Shift SEMICOLON
Reduction ( declarations -> lambda
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COLON
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COLON
Shift ARRAY
Shift LBRAC
Shift INTEGER
Shift DOTDOT
Shift INTEGER
Shift RBRAC
Shift OF
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Reduction ( type -> ARRAY LBRAC INTEGER DOTDOT INTEGER RBRAC OF type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COLON
Shift REAL
Reduction ( standard_type -> REAL_WORD)
Reduction ( type -> standard type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COLON
Shift ARRAY
Shift LBRAC
Shift INTEGER
Shift DOTDOT
Shift INTEGER
Shift RBRAC
Shift OF
Shift ARRAY
Shift LBRAC
Shift INTEGER
Shift DOTDOT
Shift INTEGER
Shift RBRAC
Shift OF
Shift REAL
Reduction ( standard_type -> REAL_WORD)
Reduction ( type -> standard type)
Reduction ( type -> ARRAY LBRAC INTEGER DOTDOT INTEGER RBRAC OF type)
Reduction ( type -> ARRAY LBRAC INTEGER DOTDOT INTEGER RBRAC OF type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift PROCEDURE
Reduction ( subprogram_declarations -> lambda)
Shift IDENTIFIER
Shift LPAREN
Shift IDENTIFIER
Reduction ( optional_var -> lambda)
Reduction ( identifier_list -> IDENTIFIER)
Shift COLON
Shift ARRAY
Shift LBRAC
Shift INTEGER
Shift DOTDOT
Shift INTEGER
Shift RBRAC
Shift OF
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Reduction ( type -> ARRAY LBRAC INTEGER DOTDOT INTEGER RBRAC OF type)
Shift RPAREN
Reduction ( parameter_list -> optional_var identifier_list COLON type)
Reduction ( arguments -> LPAREN parameter_list RPAREN)
Shift SEMICOLON
Reduction ( subprogram_head -> PROCEDURE identifier arguments SEMICOLON)
Reduction ( declarations -> lambda
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COLON
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift BEGIN
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift END
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Reduction ( subprogram_declaration -> subprogram_head declarations compound_statement)
Shift SEMICOLON
Reduction ( subprogram_declarations -> subprogram_declarations subprogram_declaration SEMICOLON)
Shift FUNCTION
Shift IDENTIFIER
Shift LPAREN
Shift IDENTIFIER
Reduction ( optional_var -> lambda)
Reduction ( identifier_list -> IDENTIFIER)
Shift COMMA
Shift IDENTIFIER
Reduction ( identifier_list COMMA IDENTIFIER)
Shift COLON
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Shift RPAREN
Reduction ( parameter_list -> optional_var identifier_list COLON type)
Reduction ( arguments -> LPAREN parameter_list RPAREN)
Shift COLON
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Shift SEMICOLON
Reduction ( subprogram_head -> FUNCTION identifier arguments COLON standard_type SEMICOLON)
Reduction ( declarations -> lambda
Shift VAR
Shift IDENTIFIER
Reduction ( identifier_list -> IDENTIFIER)
Shift COLON
Shift INT_WORD
Reduction ( standard_type -> INT_WORD)
Reduction ( type -> standard type)
Shift SEMICOLON
Reduction ( declarations -> declarations VAR identifier_list COLON type SEMICOLON)
Shift BEGIN
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift IDENTIFIER
Shift END
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Reduction ( subprogram_declaration -> subprogram_head declarations compound_statement)
Shift SEMICOLON
Reduction ( subprogram_declarations -> subprogram_declarations subprogram_declaration SEMICOLON)
Shift BEGIN
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift SEMICOLON
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Shift WHILE
Shift IDENTIFIER
Shift LI
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( relaop -> LT)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift DO
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression relaop simple_expression)
Shift BEGIN
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift IDENTIFIER
Shift SEMICOLON
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift END
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Reduction ( statement -> compound_statement)
Reduction ( statement -> WHILE expression DO statement)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift SEMICOLON
Shift BEGIN
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift SEMICOLON
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Shift WHILE
Shift IDENTIFIER
Shift LI
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( relaop -> LT)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift DO
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression relaop simple_expression)
Shift BEGIN
Shift IDENTIFIER
Shift LBRAC
Shift IDENTIFIER
Shift RBRAC
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift IDENTIFIER
Shift STAR
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( mulop -> STAR)
Shift LPAREN
Shift IDENTIFIER
Shift MINUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> MINUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RPAREN
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( factor -> LPAREN expression RPAREN)
Reduction ( term -> term mulop factor)
Shift SEMICOLON
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement)
Shift IDENTIFIER
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift END
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Reduction ( statement -> compound_statement)
Reduction ( statement -> WHILE expression DO statement)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift SEMICOLON
Shift IDENTIFIER
Shift LPAREN
Shift IDENTIFIER
Shift RPAREN
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( expression_list -> expression)
Reduction ( procedure_statement -> identifier LPAREN expression_list RPAREN)
Reduction ( statement -> procedure_statement)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift END
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Reduction ( statement -> compound_statement)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift SEMICOLON
Shift IDENTIFIER
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( variable -> identifier tail)
Shift REALNUMBER
Reduction ( factor -> REALNUMBER)
Reduction ( term -> factor)
Shift SEMICOLON
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift IDENTIFIER
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( variable -> identifier tail)
Shift IDENTIFIER
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift LBRAC
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift SEMICOLON
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Shift IDENTIFIER
Shift LBRAC
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Shift LBRAC
Shift IDENTIFIER
Shift PLUS
Reduction ( tail -> lambda)
Reduction ( factor -> identifier tail)
Reduction ( term -> factor)
Reduction ( simple_expression -> term)
Reduction ( addop -> PLUS)
Shift INTEGER
Reduction ( factor -> INTEGER)
Reduction ( term -> factor)
Shift RBRAC
Reduction ( simple_expression -> simple_expression addop term)
Reduction ( expression -> simple_expression)
Shift ASSIGNMENT
Reduction ( tail -> lambda)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( tail -> LBRAC expression RBRAC tail)
Reduction ( variable -> identifier tail)
Shift REALNUMBER
Reduction ( factor -> REALNUMBER)
Reduction ( term -> factor)
Shift END
Reduction ( simple_expression -> term)
Reduction ( expression -> simple_expression)
Reduction ( statement -> variable ASSIGNMENT expression)
Reduction ( statement_list -> statement_list SEMICOLON statement)
Reduction ( optional_statements -> statement_list)
Reduction ( compound_statement -> begin optional_statements end)
Shift DOT
Reduction ( prog -> program identifier LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT)
Parsing correctly
*********************************************
/PROG
	/PROGRAM
	/IDENTIFIER: foo
	/(
	/IDENTIFIER_LIST
		/IDENTIFIER_LIST
			/IDENTIFIER_LIST
				/IDENTIFIER: input
			/,
			/IDENTIFIER: output
		/,
		/IDENTIFIER: error
	/)
	/;
	/DECLARATIONS
		/DECLARATIONS
			/DECLARATIONS
				/DECLARATIONS
					/DECLARATIONS
						/LAMBDA
					/VAR
					/IDENTIFIER_LIST
						/IDENTIFIER_LIST
							/IDENTIFIER_LIST
								/IDENTIFIER: a
							/,
							/IDENTIFIER: b
						/,
						/IDENTIFIER: c
					/:
					/TYPE
						/STANDARD_TYPE
							/INTEGER_WORD
					/;
				/VAR
				/IDENTIFIER_LIST
					/IDENTIFIER_LIST
						/IDENTIFIER: d
					/,
					/IDENTIFIER: e
				/:
				/TYPE
					/ARRAY
					/[
					/INTEGER, 1
					/..
					/INTEGER, 10
					/]
					/OF
					/TYPE
						/STANDARD_TYPE
							/INTEGER_WORD
				/;
			/VAR
			/IDENTIFIER_LIST
				/IDENTIFIER_LIST
					/IDENTIFIER: g
				/,
				/IDENTIFIER: h
			/:
			/TYPE
				/STANDARD_TYPE
					/REAL_WORD
			/;
		/VAR
		/IDENTIFIER_LIST
			/IDENTIFIER: k
		/:
		/TYPE
			/ARRAY
			/[
			/INTEGER, 23
			/..
			/INTEGER, 57
			/]
			/OF
			/TYPE
				/ARRAY
				/[
				/INTEGER, 23
				/..
				/INTEGER, 57
				/]
				/OF
				/TYPE
					/STANDARD_TYPE
						/REAL_WORD
		/;
	/SUBDECLARATIONS
		/SUBDECLARATIONS
			/SUBDECLARATIONS
				/LAMBDA
			/SUBDECLARATION
				/SUBPROGRAM_HEAD
					/PROCEDURE
					/IDENTIFIER: sort
					/ARGUMENTS
						/(
						/PARAMETER_LIST
							/OPTIONAL VAR
								/LAMBDA
							/IDENTIFIER_LIST
								/IDENTIFIER: a
							/:
							/TYPE
								/ARRAY
								/[
								/INTEGER, 1
								/..
								/INTEGER, 10
								/]
								/OF
								/TYPE
									/STANDARD_TYPE
										/INTEGER_WORD
						/)
					/;
				/DECLARATIONS
					/DECLARATIONS
						/LAMBDA
					/VAR
					/IDENTIFIER_LIST
						/IDENTIFIER_LIST
							/IDENTIFIER_LIST
								/IDENTIFIER: a
							/,
							/IDENTIFIER: b
						/,
						/IDENTIFIER: c
					/:
					/TYPE
						/STANDARD_TYPE
							/INTEGER_WORD
					/;
				/COMPOUND_STATEMENT
					/BEGIN
					/OPTIONAL_STATEMENTS
						/STATEMENT_LIST
							/STATEMENT
								/VARIABLE
									/IDENTIFIER: e
									/TAIL
										/LAMBDA
								/ASSIGNMENT
								/EXPRESSION
									/SIMPLE_EXPRESSION
										/TERM
											/FACTOR
												/IDENTIFIER: a
												/TAIL
													/LAMBDA
					/END
			/;
		/SUBDECLARATION
			/SUBPROGRAM_HEAD
				/FUNCTION
				/IDENTIFIER: addition
				/ARGUMENTS
					/(
					/PARAMETER_LIST
						/OPTIONAL VAR
							/LAMBDA
						/IDENTIFIER_LIST
							/IDENTIFIER_LIST
								/IDENTIFIER: a
							/,
							/IDENTIFIER: b
						/:
						/TYPE
							/STANDARD_TYPE
								/INTEGER_WORD
					/)
				/:
				/STANDARD_TYPE
					/INTEGER_WORD
				/;
			/DECLARATIONS
				/DECLARATIONS
					/LAMBDA
				/VAR
				/IDENTIFIER_LIST
					/IDENTIFIER: c
				/:
				/TYPE
					/STANDARD_TYPE
						/INTEGER_WORD
				/;
			/COMPOUND_STATEMENT
				/BEGIN
				/OPTIONAL_STATEMENTS
					/STATEMENT_LIST
						/STATEMENT
							/VARIABLE
								/IDENTIFIER: addition
								/TAIL
									/LAMBDA
							/ASSIGNMENT
							/EXPRESSION
								/SIMPLE_EXPRESSION
									/SIMPLE_EXPRESSION
										/TERM
											/FACTOR
												/IDENTIFIER: a
												/TAIL
													/LAMBDA
									/ADDOP
										/+
									/TERM
										/FACTOR
											/IDENTIFIER: b
											/TAIL
												/LAMBDA
				/END
		/;
	/COMPOUND_STATEMENT
		/BEGIN
		/OPTIONAL_STATEMENTS
			/STATEMENT_LIST
				/STATEMENT_LIST
					/STATEMENT_LIST
						/STATEMENT_LIST
							/STATEMENT_LIST
								/STATEMENT_LIST
									/STATEMENT
										/VARIABLE
											/IDENTIFIER: a
											/TAIL
												/LAMBDA
										/ASSIGNMENT
										/EXPRESSION
											/SIMPLE_EXPRESSION
												/TERM
													/FACTOR
														/INTEGER, 1
								/;
								/STATEMENT
									/WHILE
									/EXPRESSION
										/SIMPLE_EXPRESSION
											/TERM
												/FACTOR
													/IDENTIFIER: a
													/TAIL
														/LAMBDA
										/RELAOP
											/<
										/SIMPLE_EXPRESSION
											/TERM
												/FACTOR
													/INTEGER, 10
									/DO
									/STATEMENT
										/COMPOUND_STATEMENT
											/BEGIN
											/OPTIONAL_STATEMENTS
												/STATEMENT_LIST
													/STATEMENT_LIST
														/STATEMENT
															/VARIABLE
																/IDENTIFIER: sum
																/TAIL
																	/LAMBDA
															/ASSIGNMENT
															/EXPRESSION
																/SIMPLE_EXPRESSION
																	/SIMPLE_EXPRESSION
																		/TERM
																			/FACTOR
																				/IDENTIFIER: sum
																				/TAIL
																					/LAMBDA
																	/ADDOP
																		/+
																	/TERM
																		/FACTOR
																			/IDENTIFIER: a
																			/TAIL
																				/LAMBDA
													/;
													/STATEMENT
														/VARIABLE
															/IDENTIFIER: a
															/TAIL
																/LAMBDA
														/ASSIGNMENT
														/EXPRESSION
															/SIMPLE_EXPRESSION
																/SIMPLE_EXPRESSION
																	/TERM
																		/FACTOR
																			/IDENTIFIER: a
																			/TAIL
																				/LAMBDA
																/ADDOP
																	/+
																/TERM
																	/FACTOR
																		/INTEGER, 1
											/END
							/;
							/STATEMENT
								/COMPOUND_STATEMENT
									/BEGIN
									/OPTIONAL_STATEMENTS
										/STATEMENT_LIST
											/STATEMENT_LIST
												/STATEMENT_LIST
													/STATEMENT
														/VARIABLE
															/IDENTIFIER: b
															/TAIL
																/LAMBDA
														/ASSIGNMENT
														/EXPRESSION
															/SIMPLE_EXPRESSION
																/TERM
																	/FACTOR
																		/INTEGER, 1
												/;
												/STATEMENT
													/WHILE
													/EXPRESSION
														/SIMPLE_EXPRESSION
															/TERM
																/FACTOR
																	/IDENTIFIER: b
																	/TAIL
																		/LAMBDA
														/RELAOP
															/<
														/SIMPLE_EXPRESSION
															/TERM
																/FACTOR
																	/INTEGER, 11
													/DO
													/STATEMENT
														/COMPOUND_STATEMENT
															/BEGIN
															/OPTIONAL_STATEMENTS
																/STATEMENT_LIST
																	/STATEMENT_LIST
																		/STATEMENT
																			/VARIABLE
																				/IDENTIFIER: d
																				/TAIL
																					/[
																					/EXPRESSION
																						/SIMPLE_EXPRESSION
																							/TERM
																								/FACTOR
																									/IDENTIFIER: b
																									/TAIL
																										/LAMBDA
																					/]
																					/TAIL
																						/LAMBDA
																			/ASSIGNMENT
																			/EXPRESSION
																				/SIMPLE_EXPRESSION
																					/SIMPLE_EXPRESSION
																						/TERM
																							/FACTOR
																								/IDENTIFIER: b
																								/TAIL
																									/LAMBDA
																					/ADDOP
																						/+
																					/TERM
																						/TERM
																							/FACTOR
																								/IDENTIFIER: b
																								/TAIL
																									/LAMBDA
																						/MULOP
																							/*
																						/FACTOR
																							/(
																							/EXPRESSION
																								/SIMPLE_EXPRESSION
																									/SIMPLE_EXPRESSION
																										/TERM
																											/FACTOR
																												/IDENTIFIER: b
																												/TAIL
																													/LAMBDA
																									/ADDOP
																										/-
																									/TERM
																										/FACTOR
																											/INTEGER, 1
																							/)
																	/;
																	/STATEMENT
																		/VARIABLE
																			/IDENTIFIER: b
																			/TAIL
																				/LAMBDA
																		/ASSIGNMENT
																		/EXPRESSION
																			/SIMPLE_EXPRESSION
																				/SIMPLE_EXPRESSION
																					/TERM
																						/FACTOR
																							/IDENTIFIER: b
																							/TAIL
																								/LAMBDA
																				/ADDOP
																					/+
																				/TERM
																					/FACTOR
																						/INTEGER, 1
															/END
											/;
											/STATEMENT
												/PROCEDURE_STATEMENTS
													/IDENTIFIER: sort
													/(
													/EXPRESSION_LIST
														/EXPRESSION
															/SIMPLE_EXPRESSION
																/TERM
																	/FACTOR
																		/IDENTIFIER: d
																		/TAIL
																			/LAMBDA
													/)
									/END
						/;
						/STATEMENT
							/VARIABLE
								/IDENTIFIER: k
								/TAIL
									/[
									/EXPRESSION
										/SIMPLE_EXPRESSION
											/TERM
												/FACTOR
													/INTEGER, 25
									/]
									/TAIL
										/[
										/EXPRESSION
											/SIMPLE_EXPRESSION
												/TERM
													/FACTOR
														/INTEGER, 26
										/]
										/TAIL
											/LAMBDA
							/ASSIGNMENT
							/EXPRESSION
								/SIMPLE_EXPRESSION
									/TERM
										/FACTOR
											/REALNUMBER, 3.140000
					/;
					/STATEMENT
						/VARIABLE
							/IDENTIFIER: k
							/TAIL
								/[
								/EXPRESSION
									/SIMPLE_EXPRESSION
										/TERM
											/FACTOR
												/INTEGER, 25
								/]
								/TAIL
									/[
									/EXPRESSION
										/SIMPLE_EXPRESSION
											/TERM
												/FACTOR
													/INTEGER, 26
									/]
									/TAIL
										/LAMBDA
						/ASSIGNMENT
						/EXPRESSION
							/SIMPLE_EXPRESSION
								/SIMPLE_EXPRESSION
									/TERM
										/FACTOR
											/IDENTIFIER: k
											/TAIL
												/[
												/EXPRESSION
													/SIMPLE_EXPRESSION
														/TERM
															/FACTOR
																/INTEGER, 25
												/]
												/TAIL
													/[
													/EXPRESSION
														/SIMPLE_EXPRESSION
															/TERM
																/FACTOR
																	/INTEGER, 26
													/]
													/TAIL
														/LAMBDA
								/ADDOP
									/+
								/TERM
									/FACTOR
										/INTEGER, 3
				/;
				/STATEMENT
					/VARIABLE
						/IDENTIFIER: k
						/TAIL
							/[
							/EXPRESSION
								/SIMPLE_EXPRESSION
									/SIMPLE_EXPRESSION
										/TERM
											/FACTOR
												/IDENTIFIER: a
												/TAIL
													/LAMBDA
									/ADDOP
										/+
									/TERM
										/FACTOR
											/INTEGER, 35
							/]
							/TAIL
								/[
								/EXPRESSION
									/SIMPLE_EXPRESSION
										/SIMPLE_EXPRESSION
											/TERM
												/FACTOR
													/IDENTIFIER: a
													/TAIL
														/LAMBDA
										/ADDOP
											/+
										/TERM
											/FACTOR
												/INTEGER, 30
								/]
								/TAIL
									/LAMBDA
					/ASSIGNMENT
					/EXPRESSION
						/SIMPLE_EXPRESSION
							/TERM
								/FACTOR
									/REALNUMBER, 3.140000
		/END
	/.